<?xml version="1.0"?>
<root>
    <!-- APPLICATION DEFINITIONS -->
    <appdef>
        <appname>XQUARTZ</appname>
        <equal>org.macosforge.xquartz.X11</equal>
    </appdef>

    <!-- Key Remaps -->
    <item>
        <name>Remap Caps Lock (⇪) to Hyper with Escape on Tap</name>
        <appendix>OS X doesn't have Hyper. This maps caps lock (actually F19) to Control + Shift + Option + Command, unless you tap it. Then it sends Escape.</appendix>
        <!-- <not>ITERM2</not> -->
        <identifier>private.hyper</identifier>

        <autogen>
            --KeyOverlaidModifier--
            KeyCode::F19,

            KeyCode::COMMAND_L,
            ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
            KeyCode::ESCAPE,
        </autogen>
    </item>

    <item>
        <name>Tmux Hyper</name>
        <appendix></appendix>
        <identifier>private.tmux.hyper</identifier>
        <autogen>
            __KeyToKey__
            KeyCode::A,
            ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,

            KeyCode::A, ModifierFlag::CONTROL_L
        </autogen>
    </item>

    <item>
        <name>This Mac needs an insert key</name>
        <identifier>private.mac_insert</identifier>
        <autogen>
            __KeyToKey__
            KeyCode::CONTROL_L, ModifierFlag::FN,
            KeyCode::PC_INSERT
        </autogen>
    </item>

    <item>
        <name>Vim-Addict</name>
        <!-- Move around text fields with Hyper+hjkl -->
        <item>
            <name>arrowkeys with hyper+hjkl</name>
            <identifier>private.vim.arrows</identifier>
            <autogen>
                __KeyToKey__
                KeyCode::H,
                ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,

                KeyCode::CURSOR_LEFT
            </autogen>
            <autogen>
                __KeyToKey__
                KeyCode::J,
                ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,

                KeyCode::CURSOR_DOWN
            </autogen>
            <autogen>
                __KeyToKey__
                KeyCode::K,
                ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,

                KeyCode::CURSOR_UP
            </autogen>
            <autogen>
                __KeyToKey__
                KeyCode::L,
                ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,

                KeyCode::CURSOR_RIGHT
            </autogen>
        </item>
        <!-- Change Applications -->
        <item>
            <name>change applications with Cmd+jk</name>
            <identifier>private.vim.appl</identifier>
            <autogen>
                __KeyToKey__
                KeyCode::J, ModifierFlag::COMMAND_L,

                KeyCode::TAB, ModifierFlag::SHIFT_L, ModifierFlag::COMMAND_L
            </autogen>
            <autogen>
                __KeyToKey__
                KeyCode::K, ModifierFlag::COMMAND_L,

                KeyCode::TAB, ModifierFlag::COMMAND_L
            </autogen>
        </item>
        <!-- Change windows -->
        <item>
            <name>change windows with Option+jk</name>
            <identifier>private.vim.win</identifier>
            <autogen>
                __KeyToKey__
                KeyCode::K, ModifierFlag::OPTION_L,

                KeyCode::BACKQUOTE, ModifierFlag::COMMAND_L
            </autogen>
            <autogen>
                __KeyToKey__
                KeyCode::J, ModifierFlag::OPTION_L,

                KeyCode::BACKQUOTE, ModifierFlag::SHIFT_L, ModifierFlag::COMMAND_L
            </autogen>
        </item>
        <!-- Change tabs (at least in Chrome) -->
        <item>
            <name>change tabs with Shift+jk</name>
            <identifier>private.vim.tabs</identifier>
            <autogen>
                __KeyToKey__
                KeyCode::J, ModifierFlag::SHIFT_L,

                KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L, ModifierFlag::OPTION_L
            </autogen>
            <autogen>
                __KeyToKey__
                KeyCode::K, ModifierFlag::SHIFT_L,

                KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L, ModifierFlag::OPTION_L
            </autogen>
        </item>
    </item>

    <item>
        <name>Tap shift to move over words</name>
        <appendix>Shift keys move the cursor one word forward or backward when pressed alone. When pressed with other keys they act as normal shifts.</appendix>
        <identifier>private.shifts_to_forward_backward_word</identifier>

        <autogen>
            --KeyOverlaidModifier--
            KeyCode::SHIFT_R,
            ModifierFlag::SHIFT_R | ModifierFlag::NONE,
            KeyCode::SHIFT_R,
            KeyCode::CURSOR_RIGHT, ModifierFlag::OPTION_L,
        </autogen>
        <autogen>
            --KeyOverlaidModifier--
            KeyCode::SHIFT_L,
            ModifierFlag::SHIFT_L | ModifierFlag::NONE,
            KeyCode::SHIFT_L,
            KeyCode::CURSOR_LEFT, ModifierFlag::OPTION_L,
        </autogen>
    </item>

    <!-- src: http://stevelosh.com/blog/2012/10/a-modern-space-cadet/ -->
    <item>
        <name>Tap shift to parentheses</name>
        <appendix>Shift keys act as parentheses when pressed alone. When pressed with other keys they act as normal shifts.</appendix>
        <identifier>private.shifts_to_parentheses</identifier>

        <autogen>
            --KeyOverlaidModifier--
            KeyCode::SHIFT_R,
            ModifierFlag::SHIFT_R | ModifierFlag::NONE,
            KeyCode::SHIFT_R,
            KeyCode::KEY_0, ModifierFlag::SHIFT_L
        </autogen>
        <autogen>
            --KeyOverlaidModifier--
            KeyCode::SHIFT_L,
            ModifierFlag::SHIFT_L | ModifierFlag::NONE,
            KeyCode::SHIFT_L,
            KeyCode::KEY_9, ModifierFlag::SHIFT_R,
        </autogen>
    </item>

    <!-- Make umlaut keys useful for coding, by assigning brackets and symbols to right modifier key combinations -->
    <item>
        <name>Umlaut Mods</name>
        <item>
            <name>Option-Right(⌥)+Ü to Backslash \</name>
            <identifier>private.option_ue_to_backslash</identifier>
            <inputsource_only>GERMAN</inputsource_only>
            <autogen>
                --KeyOverlaidModifier--
                KeyCode::GERMAN_U_UMLAUT, ModifierFlag::OPTION_R,

                KeyCode::KEY_7, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L,
            </autogen>
        </item>
        <item>
            <name>Shift-Right(⇧)+Ü to Forward Slash /</name>
            <identifier>private.shift_right_ue_to_forward_slash</identifier>
            <inputsource_only>GERMAN</inputsource_only>
            <autogen>
                --KeyOverlaidModifier--
                KeyCode::GERMAN_U_UMLAUT, ModifierFlag::SHIFT_R,

                KeyCode::KEY_7, ModifierFlag::SHIFT_L,
            </autogen>
        </item>
        <item>
            <name>Command-Right(⌘)+Ü to Pipe |</name>
            <identifier>private.command_ue_to_pipe</identifier>
            <inputsource_only>GERMAN</inputsource_only>
            <autogen>
                --KeyOverlaidModifier--
                KeyCode::GERMAN_U_UMLAUT, ModifierFlag::COMMAND_R,

                KeyCode::KEY_7, ModifierFlag::OPTION_L,
            </autogen>
        </item>
        <item>
            <name>Shift-Right(⇧)+Ö/Ä to Curly Brackets {}</name>
            <identifier>private.shift_right_ae_oe_to_curly_brackety</identifier>
            <inputsource_only>GERMAN</inputsource_only>
            <autogen>
                --KeyOverlaidModifier--
                KeyCode::GERMAN_O_UMLAUT, ModifierFlag::SHIFT_R,

                KeyCode::KEY_8, ModifierFlag::OPTION_L,
            </autogen>
            <autogen>
                --KeyOverlaidModifier--
                KeyCode::GERMAN_A_UMLAUT, ModifierFlag::SHIFT_R,

                KeyCode::KEY_9, ModifierFlag::OPTION_L,
            </autogen>
        </item>
    </item>

</root>
