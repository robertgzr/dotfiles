#
# rbZ prompt
#
# Author:
#   robertgzr
#   http://github.com/robertgzr
#

# ==== Visual definitions

SEGMENT_SEPERATOR=''
SEGMENT_SEPERATOR_slim=''
SEGMENT_SEPERATOR_right=''
SEGMENT_SEPERATOR_right=''
_prompt_rbprez_lock=''
_PLGIT_=''
CROSS="🚫 "
LIGHTNING="⚡ "
GEAR="⚙ "
GIT_ADDED=' ✚'
# GIT_AHEAD=' ⬆'
GIT_AHEAD=' ↑'
# GIT_BEHIND=' ⬇'
GIT_BEHIND=' ↓'
GIT_BRANCH=''
GIT_COMMIT='➦'
GIT_DELETED=' ✖'
GIT_MODIFIED=' ✱'
GIT_STASHED=' S'
GIT_UNINDEXED=' '
GIT_UNMERGED=' ═'
GIT_UNTRACKED=' ?'
GIT_DIRTY='✗'
GIT_CLEAN='✔'

# ==== Helper Varibles

CURRENT_BG='NONE'
PRIMARY_FG=white

# ==== Helper functions

# Starts a prompt segment
# takes bg and fg color as arguments, default if none
function prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    print -n "%{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPERATOR%{$fg%}"
  else
    print -n "%{$bg%}%{$fg%}"
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -n $3
}

# End the prompt, closing any open segments
# takes bg and fg color as arguments, default if none
function prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    print -n "%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPERATOR"
  else
    print -n "%{%k%}"
  fi
  print -n "%{%f%}"
  CURRENT_BG=''
}

# Sets up: user@host
function prompt_context() {
  local user=`whoami`

  # prints 'local' if whoami returns $USER
  if [[ "$user" != "$USER" || -n "$SSH_CONNECTION" ]]; then
    prompt_segment $PRIMARY_FG default " %(!.%{$PR_YELLOW%}.)$user@%m "
  else
    prompt_segment blue white " local "
  fi
}

# Sets up: pwd
# takes 'short' as argument
function prompt_dir() {
    if [[ $1 = short ]]; then
        # shortend path behaviour
        local pwd="${PWD/#$HOME/~}"

        if [[ "$pwd" == (#m)[/~] ]]; then
            prompt_segment black blue "$MATCH"
            unset MATCH
        else
            prompt_segment black blue "${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}"
        fi
    else
        # default behaviour
        prompt_segment black blue ' %~ '
    fi
}

# Sets up: command status
function prompt_status() {
  local symbols
  symbols=()
  # [[ $RETVAL -ne 0 ]] && symbols+="%{%F{red}%}$CROSS"
  [[ $UID -eq 0 ]] && symbols+="%{$PR_YELLOW%}$LIGHTNING"
  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{$PR_CYAN%}$GEAR"

  [[ -n "$symbols" ]] && prompt_segment blue default "$symbols"
}

# Sets up: input start symbol (newline?)
function prompt_input_start() {
    print -n $'\n'
    [[ $RETVAL -ne 0 ]] && fg="$PR_RED" || fg="$PR_WHITE" # fg="%F{default}"
    if [[ $1 -ne 0 ]]; then
        print -n "%{$fg%}$1%{%f%} "
    else
        print -n "%{$fg%}↳%{%f%} "
    fi
}

function prompt_git {
  # Return if not inside a Git repository work tree.
  if ! $(git rev-parse --is-inside-work-tree 2> /dev/null); then
    return 1
  fi

  if (type git_super_status &> /dev/null); then
    git_super_status
  else
    print -n "$GIT_BRANCH %{%F{magenta}%}${$(git symbolic-ref HEAD 2> /dev/null)#refs/heads/}%{%f%}"
  fi
}

# Sets up: python information
function prompt_python {
  if [[ -n "$python_info" ]]; then
    prompt_segment default yellow "${python_info[virtualenv]} "
  fi
}

# ==== Prompt constructor functions

# Set up main ain prompt
function prompt_make_main() {
    RETVAL=$?
    CURRENT_BG='NONE'
    prompt_status
    prompt_context
    prompt_dir
    prompt_end
    prompt_input_start
    # ➤ ➜ Ɣ 〓 λ ⌘ ↪
}

# Set up right prompt
function prompt_make_right() {
  prompt_git
  prompt_python
}

# ==== Prompt help

function prompt_help() {
  read -r -d '' HELP << EOH
This prompts last command exit status symbol is customizable:

\tprompt rbprez [<symbol>]

Git symbols help table:
 $GIT_BRANCH \tmarks current branch
 $GIT_COMMIT\tmarks current commit
$GIT_ADDED\tadded
$GIT_AHEAD\tahead
$GIT_BEHIND\tbehind
$GIT_DELETED\tdeleted
$GIT_MODIFIED\tmodified
$GIT_INDEXED\tindexed
$GIT_STASHED\tstashed
$GIT_UNINDEXED\tunindexed
$GIT_UNMERGED\tunmerged
$GIT_UNTRACKED\tuntracked
$GIT_DIRTY\tdirty
$GIT_CLEAN\tclean
EOH
  echo "$HELP"
}

# ==== Prompt precmd

# runs on every command
function prompt_precmd() {
    autoload -Uz python-info

    python-info

    # Set the prompt strings
    PROMPT='%{%f%b%k%}$(prompt_make_main)'
    RPROMPT=' $(prompt_make_right)'
}

# ==== Main part here:

# Loads and formats prompt
function prompt_rbz() {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Load required functions
  autoload -Uz add-zsh-hook

  # Hook up to ZSH precmd function
  add-zsh-hook precmd prompt_precmd
}

prompt_rbz "$@"